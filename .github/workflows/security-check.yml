name: 🛡️ Security & Anomaly Check

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  security-anomaly-scan:
    name: 🔐 Security & Anomaly Analysis
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v3

      - name: 🧪 Run Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 🐍 Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Install Python Dependencies
        run: |
          pip install --no-cache-dir pandas scikit-learn bandit pylint

      - name: 🔐 Run Bandit Security Linter
        run: |
          bandit -r . -f json -o bandit_report.json || true

      - name: 🧠 Run Pylint Static Code Analysis
        run: |
          pylint $(find . -name "*.py") > pylint_report.txt || true

      - name: 🚀 Run Anomaly Detection
        run: |
          python detect.py || echo "Anomaly script failed."

      - name: 📤 Upload Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            anomaly_report.md
            bandit_report.json
            pylint_report.txt

      - name: ❌ Fail Build if Anomalies Detected
        if: always()
        run: |
          if [ -f anomaly_report.md ]; then
            echo "🚨 Anomalies detected — failing the build."
            exit 1
          fi

      - name: ❌ Fail Build on Bandit Issues
        if: always()
        run: |
          if grep -q '"issue_severity":' bandit_report.json; then
            echo "🚨 Security issues found by Bandit!"
            exit 1
          fi

      - name: ❌ Fail Build if Pylint Score < 8.0
        if: always()
        run: |
          SCORE=$(tail -n 2 pylint_report.txt | grep -oP '[0-9.]+(?=/10)')
          if [ -z "$SCORE" ]; then
            echo "⚠️ Could not parse Pylint score. Skipping."
            exit 0
          elif (( $(echo "$SCORE < 8.0" | bc -l) )); then
            echo "🚨 Pylint score too low: $SCORE/10"
            exit 1
          else
            echo "✅ Pylint score acceptable: $SCORE/10"
          fi
